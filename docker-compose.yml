services:
  frontend:
    build:
      context: ./frontend
      args:
        # Генерируем уникальное значение при каждом build
        CACHEBUST: ${CACHEBUST:-$(date +%s)}
      # Отключаем кеш для frontend при build
      no_cache: true
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./Backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      ml-api:
        condition: service_started
    networks:
      - app-network

  ml-worker:
    build:
      context: ./ML
    command: celery -A app.celery_worker.celery_app worker --loglevel=info -c 1
    env_file:
      - .env
    volumes:
      - ml-rag-db:/app/db
    depends_on:
      ml-api:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  redis:
    image: redis:8-alpine
    networks:
      - app-network

  ml-api:
    build:
      context: ./ML
    volumes:
      - ml-rag-db:/app/db
    ports:
      - "8001:8001"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001
    env_file:
      - .env
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 300s
    networks:
      - app-network

  ollama:
    profiles: ["llm"]
    build:
      context: ./ML
      dockerfile: Dockerfile.ollama
    volumes:
      - ollama-data:/root/.ollama
    ports:
      - "11434:11434"
    # если есть gpu - раскомментировать
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    networks:
      - app-network

  postgres:
    image: postgres:17
    container_name: postgres
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  ollama-data:
  postgres-data:
  ml-rag-db:
